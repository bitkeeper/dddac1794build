diff --git a/src/pcm/SoxrResampler.cxx b/src/pcm/SoxrResampler.cxx
index e896bef7b..6d90e60f5 100644
--- a/src/pcm/SoxrResampler.cxx
+++ b/src/pcm/SoxrResampler.cxx
@@ -29,7 +29,7 @@
 #include <cassert>

 #include <string.h>
-
+#include <math.h>
 static constexpr Domain soxr_domain("soxr");

 static constexpr unsigned long SOXR_DEFAULT_RECIPE = SOXR_HQ;
@@ -38,9 +40,16 @@ static constexpr unsigned long SOXR_DEFAULT_RECIPE = SOXR_HQ;
  */
 static constexpr unsigned long SOXR_INVALID_RECIPE = -1;
 
+/**
+ * Special value for custom recipe.
+ */
+static constexpr unsigned long SOXR_CUSTOM_RECIPE = -2;
+
+static soxr_io_spec_t soxr_io;
 static soxr_quality_spec_t soxr_quality;
 static soxr_runtime_spec_t soxr_runtime;
 
+
 static constexpr struct {
 	unsigned long recipe;
 	const char *name;
@@ -50,6 +59,7 @@ static constexpr struct {
 	{ SOXR_MQ, "medium" },
 	{ SOXR_LQ, "low" },
 	{ SOXR_QQ, "quick" },
+	{ SOXR_CUSTOM_RECIPE, "custom"},
 	{ SOXR_INVALID_RECIPE, nullptr }
 };
 
@@ -79,20 +89,110 @@ soxr_parse_quality(const char *quality) noexcept
 	return SOXR_INVALID_RECIPE;
 }
 
+static unsigned 
+soxr_parse_precision(unsigned value) {
+	switch(value) {
+		case 16:
+		case 20:
+		case 24:
+		case 28:
+		case 32:
+			break;
+		default:
+			throw FormatInvalidArgument("soxr converter invalid precision : %d [16|20|24|28|32]",
+					    value);
+			break;
+	}
+	return value;
+}
+
+static double
+soxr_parse_phase_respons(signed value) {
+	if(value<0 || value> 100) {
+			throw FormatInvalidArgument("soxr converter invalid phase_respons : %d (0-100)",
+					    value);
+	}
+
+	return value;
+}
+
+static double
+soxr_parse_passband_end(const char* svalue) {
+	char* endptr;
+	double value=strtod (svalue, &endptr);
+	if(*endptr) {
+			throw FormatInvalidArgument("soxr converter passband_end value not a number: %s",
+					    svalue);
+	}
+
+	if(value<1 || value> 100) {
+			throw FormatInvalidArgument("soxr converter invalid passband_end : %d (1-100%)",
+					    value);
+	}
+
+	return value/100.0;
+}
+
+static double
+soxr_parse_stopband_begin(const char* svalue) {
+	char* endptr;
+	double value=strtod (svalue, &endptr);
+	if(*endptr) {
+			throw FormatInvalidArgument("soxr converter stopband_begin value not a number: %s",
+					    svalue);
+	}
+
+	if(value<100 || value> 150) {
+			throw FormatInvalidArgument("soxr converter invalid stopband_begin : %d (100-150%)",
+					    value);
+	}
+
+	return value/100.0;
+}
+
+static double
+soxr_parse_attenuation(const char* svalue) {
+	char* endptr;
+	double value=strtod (svalue, &endptr);
+	if(*endptr) {
+			throw FormatInvalidArgument("soxr converter attenuation value not a number: %s",
+					    svalue);
+	}
+
+	if(value<0 || value> 30) {
+			throw FormatInvalidArgument("soxr converter invalid attenuation : %d (0-30)%)",
+					    value);
+	}
+
+	return 1/pow(10, value/10.0);
+}
+
 void
 pcm_resample_soxr_global_init(const ConfigBlock &block)
 {
 	const char *quality_string = block.GetBlockValue("quality");
-	unsigned long recipe = soxr_parse_quality(quality_string);
+	unsigned long recipe = SOXR_INVALID_RECIPE;
+
+	recipe = soxr_parse_quality(quality_string);
 	if (recipe == SOXR_INVALID_RECIPE) {
 		assert(quality_string != nullptr);
-
 		throw FormatRuntimeError("unknown quality setting '%s' in line %d",
-					 quality_string, block.line);
+					quality_string, block.line);
 	}
+	else if (recipe == SOXR_CUSTOM_RECIPE ) {
+		soxr_quality.precision = soxr_parse_precision( block.GetBlockValue("precision", SOXR_HQ) );
+		soxr_quality.phase_response = soxr_parse_phase_respons( block.GetBlockValue("phase_response", 50) );
+		soxr_quality.passband_end = soxr_parse_passband_end(block.GetBlockValue("passband_end", "95.0") );
+		soxr_quality.stopband_begin = soxr_parse_stopband_begin( block.GetBlockValue("stopband_begin", "100.0") );
+		soxr_quality.flags = block.GetBlockValue("flags", 0) & 0x3F; // see soxr.h soxr_quality_spec.flags
+		soxr_io = soxr_io_spec(SOXR_FLOAT32_I, SOXR_FLOAT32_I);
+		soxr_io.scale = soxr_parse_attenuation( block.GetBlockValue("attenuation", "0")); 
+	}
+	else {
+		soxr_quality = soxr_quality_spec(recipe, 0);
+	};
 
-	soxr_quality = soxr_quality_spec(recipe, 0);
-
+	
 	FormatDebug(soxr_domain,
 		    "soxr converter '%s'",
 		    soxr_quality_name(recipe));
@@ -108,14 +208,19 @@ SoxrPcmResampler::Open(AudioFormat &af, unsigned new_sample_rate)
 	assert(audio_valid_sample_rate(new_sample_rate));
 
 	soxr_error_t e;
+	soxr_io_spec_t* p_soxr_io = nullptr;
+	if(soxr_io.scale != 0) {
+		p_soxr_io = & soxr_io;
+	}
 	soxr = soxr_create(af.sample_rate, new_sample_rate,
 			   af.channels, &e,
-			   nullptr, &soxr_quality, &soxr_runtime);
+			   p_soxr_io, &soxr_quality, &soxr_runtime);
 	if (soxr == nullptr)
 		throw FormatRuntimeError("soxr initialization has failed: %s",
 					 e);
 
 	FormatDebug(soxr_domain, "soxr engine '%s'", soxr_engine(soxr));
+	FormatDebug(soxr_domain, "soxr precision=%0.2f, phase_response=%0.2f, passband_end=%0.2f, stopband_begin=%0.2f scale=%0.2f", soxr_quality.precision, soxr_quality.phase_response, soxr_quality.passband_end, soxr_quality.stopband_begin, soxr_io.scale  );
 
 	channels = af.channels;
 
